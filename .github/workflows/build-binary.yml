name: Build And Deploy


on:
  push:
    branches: [ "main" ]

jobs:

  createrelease:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Send Push
        uses: fjogeleit/http-request-action@v1
        with:
          url: "https://api.day.app/${{ secrets.NOTIFY_DEVICE_ID }}/play部署/server构建开始"
      - name: Create Release
        id: create_release
        uses: "marvinpinto/action-automatic-releases@latest"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: false
          title: "MacOS & Windows Build"
          draft: false

      - name: Output Release URL File
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
      - name: Save Release URL File for publish
        uses: actions/upload-artifact@v4
        with:
          name: release_url
          path: release_url.txt
  buildDebian:
    name: Build Linux packages
    needs: createrelease
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build Docker Image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          file: ./scripts/dockerfiles/bin.Dockerfile
          tags: tmp-image
          push: false
          no-cache: false
          pull: true
      - name: Send failure notification
        if: failure()
        uses: fjogeleit/http-request-action@v1
        with:
          url: "https://api.day.app/${{ secrets.NOTIFY_DEVICE_ID }}/play部署/server构建失败!!!"

      - name: Check build result
        if: failure()
        run: |
          echo "Docker build failed!"
          exit 1
      - uses: shrink/actions-docker-extract@v1
        id: extract
        with:
          image: tmp-image
          path: /app/.
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v4
        with:
          name: release_url
      - name: Get Release File Name & Upload URL
        id: get_release_info
        shell: bash
        run: |
          value=`cat release_url.txt`
          echo ::set-output name=upload_url::$value
      - name: Zip files
        id: zip_files
        shell: bash
        run: |
          cd ${{ steps.extract.outputs.destination }} &&
          zip -r9 ../play_linux.zip play-server &&
          cp play-server ../play_linux
      - name: Upload Release Asset tar
        id: upload-release-asset-tar
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./play_linux.zip
          asset_name: play_linux.zip
          asset_content_type: application/zip
      - name: Upload Release Asset play
        id: upload-release-asset-play
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./play_linux
          asset_name: play_linux
          asset_content_type: application/x-binary
      - name: Trigger Upgrade
        uses: fjogeleit/http-request-action@v1
        with:
          url: ${{ secrets.TRIGGER_UPGRADE_URL }}
          method: 'GET'
          customHeaders:  ${{ secrets.TRIGGER_UPGRADE_CUSTOM_HEADER }}
      - name: Send Push
        uses: fjogeleit/http-request-action@v1
        with:
          url: "https://api.day.app/${{ secrets.NOTIFY_DEVICE_ID }}/play部署/server构建成功"
